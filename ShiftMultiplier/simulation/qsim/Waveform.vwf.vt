// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/12/2016 15:03:16"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    IntegerMultiplier
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module IntegerMultiplier_vlg_sample_tst(
	clock,
	multiplicand,
	multiplier,
	start,
	sampler_tx
);
input  clock;
input [7:0] multiplicand;
input [7:0] multiplier;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(clock or multiplicand or multiplier or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module IntegerMultiplier_vlg_check_tst (
	counter0,
	counter1,
	done,
	product,
	product0,
	product1,
	product2,
	product3,
	sampler_rx
);
input [1:7] counter0;
input [1:7] counter1;
input  done;
input [16:0] product;
input [1:7] product0;
input [1:7] product1;
input [1:7] product2;
input [1:7] product3;
input sampler_rx;

reg [1:7] counter0_expected;
reg [1:7] counter1_expected;
reg  done_expected;
reg [16:0] product_expected;
reg [1:7] product0_expected;
reg [1:7] product1_expected;
reg [1:7] product2_expected;
reg [1:7] product3_expected;

reg [1:7] counter0_prev;
reg [1:7] counter1_prev;
reg  done_prev;
reg [16:0] product_prev;
reg [1:7] product0_prev;
reg [1:7] product1_prev;
reg [1:7] product2_prev;
reg [1:7] product3_prev;

reg  done_expected_prev;
reg [16:0] product_expected_prev;

reg  last_done_exp;
reg [16:0] last_product_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	counter0_prev = counter0;
	counter1_prev = counter1;
	done_prev = done;
	product_prev = product;
	product0_prev = product0;
	product1_prev = product1;
	product2_prev = product2;
	product3_prev = product3;
end

// update expected /o prevs

always @(trigger)
begin
	done_expected_prev = done_expected;
	product_expected_prev = product_expected;
end



// expected done
initial
begin
	done_expected = 1'bX;
end 
// expected product[ 16 ]
initial
begin
	product_expected[16] = 1'bX;
end 
// expected product[ 15 ]
initial
begin
	product_expected[15] = 1'bX;
end 
// expected product[ 14 ]
initial
begin
	product_expected[14] = 1'bX;
end 
// expected product[ 13 ]
initial
begin
	product_expected[13] = 1'bX;
end 
// expected product[ 12 ]
initial
begin
	product_expected[12] = 1'bX;
end 
// expected product[ 11 ]
initial
begin
	product_expected[11] = 1'bX;
end 
// expected product[ 10 ]
initial
begin
	product_expected[10] = 1'bX;
end 
// expected product[ 9 ]
initial
begin
	product_expected[9] = 1'bX;
end 
// expected product[ 8 ]
initial
begin
	product_expected[8] = 1'bX;
end 
// expected product[ 7 ]
initial
begin
	product_expected[7] = 1'bX;
end 
// expected product[ 6 ]
initial
begin
	product_expected[6] = 1'bX;
end 
// expected product[ 5 ]
initial
begin
	product_expected[5] = 1'bX;
end 
// expected product[ 4 ]
initial
begin
	product_expected[4] = 1'bX;
end 
// expected product[ 3 ]
initial
begin
	product_expected[3] = 1'bX;
end 
// expected product[ 2 ]
initial
begin
	product_expected[2] = 1'bX;
end 
// expected product[ 1 ]
initial
begin
	product_expected[1] = 1'bX;
end 
// expected product[ 0 ]
initial
begin
	product_expected[0] = 1'bX;
end 
// generate trigger
always @(counter0_expected or counter0 or counter1_expected or counter1 or done_expected or done or product_expected or product or product0_expected or product0 or product1_expected or product1 or product2_expected or product2 or product3_expected or product3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected counter0 = %b | expected counter1 = %b | expected done = %b | expected product = %b | expected product0 = %b | expected product1 = %b | expected product2 = %b | expected product3 = %b | ",counter0_expected_prev,counter1_expected_prev,done_expected_prev,product_expected_prev,product0_expected_prev,product1_expected_prev,product2_expected_prev,product3_expected_prev);
	$display("| real counter0 = %b | real counter1 = %b | real done = %b | real product = %b | real product0 = %b | real product1 = %b | real product2 = %b | real product3 = %b | ",counter0_prev,counter1_prev,done_prev,product_prev,product0_prev,product1_prev,product2_prev,product3_prev);
`endif
	if (
		( done_expected_prev !== 1'bx ) && ( done_prev !== done_expected_prev )
		&& ((done_expected_prev !== last_done_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port done :: @time = %t",  $realtime);
		$display ("     Expected value = %b", done_expected_prev);
		$display ("     Real value = %b", done_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_done_exp = done_expected_prev;
	end
	if (
		( product_expected_prev[0] !== 1'bx ) && ( product_prev[0] !== product_expected_prev[0] )
		&& ((product_expected_prev[0] !== last_product_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_product_exp[0] = product_expected_prev[0];
	end
	if (
		( product_expected_prev[1] !== 1'bx ) && ( product_prev[1] !== product_expected_prev[1] )
		&& ((product_expected_prev[1] !== last_product_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_product_exp[1] = product_expected_prev[1];
	end
	if (
		( product_expected_prev[2] !== 1'bx ) && ( product_prev[2] !== product_expected_prev[2] )
		&& ((product_expected_prev[2] !== last_product_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_product_exp[2] = product_expected_prev[2];
	end
	if (
		( product_expected_prev[3] !== 1'bx ) && ( product_prev[3] !== product_expected_prev[3] )
		&& ((product_expected_prev[3] !== last_product_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_product_exp[3] = product_expected_prev[3];
	end
	if (
		( product_expected_prev[4] !== 1'bx ) && ( product_prev[4] !== product_expected_prev[4] )
		&& ((product_expected_prev[4] !== last_product_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_product_exp[4] = product_expected_prev[4];
	end
	if (
		( product_expected_prev[5] !== 1'bx ) && ( product_prev[5] !== product_expected_prev[5] )
		&& ((product_expected_prev[5] !== last_product_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_product_exp[5] = product_expected_prev[5];
	end
	if (
		( product_expected_prev[6] !== 1'bx ) && ( product_prev[6] !== product_expected_prev[6] )
		&& ((product_expected_prev[6] !== last_product_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_product_exp[6] = product_expected_prev[6];
	end
	if (
		( product_expected_prev[7] !== 1'bx ) && ( product_prev[7] !== product_expected_prev[7] )
		&& ((product_expected_prev[7] !== last_product_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_product_exp[7] = product_expected_prev[7];
	end
	if (
		( product_expected_prev[8] !== 1'bx ) && ( product_prev[8] !== product_expected_prev[8] )
		&& ((product_expected_prev[8] !== last_product_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_product_exp[8] = product_expected_prev[8];
	end
	if (
		( product_expected_prev[9] !== 1'bx ) && ( product_prev[9] !== product_expected_prev[9] )
		&& ((product_expected_prev[9] !== last_product_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_product_exp[9] = product_expected_prev[9];
	end
	if (
		( product_expected_prev[10] !== 1'bx ) && ( product_prev[10] !== product_expected_prev[10] )
		&& ((product_expected_prev[10] !== last_product_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_product_exp[10] = product_expected_prev[10];
	end
	if (
		( product_expected_prev[11] !== 1'bx ) && ( product_prev[11] !== product_expected_prev[11] )
		&& ((product_expected_prev[11] !== last_product_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_product_exp[11] = product_expected_prev[11];
	end
	if (
		( product_expected_prev[12] !== 1'bx ) && ( product_prev[12] !== product_expected_prev[12] )
		&& ((product_expected_prev[12] !== last_product_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_product_exp[12] = product_expected_prev[12];
	end
	if (
		( product_expected_prev[13] !== 1'bx ) && ( product_prev[13] !== product_expected_prev[13] )
		&& ((product_expected_prev[13] !== last_product_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_product_exp[13] = product_expected_prev[13];
	end
	if (
		( product_expected_prev[14] !== 1'bx ) && ( product_prev[14] !== product_expected_prev[14] )
		&& ((product_expected_prev[14] !== last_product_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_product_exp[14] = product_expected_prev[14];
	end
	if (
		( product_expected_prev[15] !== 1'bx ) && ( product_prev[15] !== product_expected_prev[15] )
		&& ((product_expected_prev[15] !== last_product_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_product_exp[15] = product_expected_prev[15];
	end
	if (
		( product_expected_prev[16] !== 1'bx ) && ( product_prev[16] !== product_expected_prev[16] )
		&& ((product_expected_prev[16] !== last_product_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port product[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", product_expected_prev);
		$display ("     Real value = %b", product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_product_exp[16] = product_expected_prev[16];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module IntegerMultiplier_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [7:0] multiplicand;
reg [7:0] multiplier;
reg start;
// wires                                               
wire [1:7] counter0;
wire [1:7] counter1;
wire done;
wire [16:0] product;
wire [1:7] product0;
wire [1:7] product1;
wire [1:7] product2;
wire [1:7] product3;

wire sampler;                             

// assign statements (if any)                          
IntegerMultiplier i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.counter0(counter0),
	.counter1(counter1),
	.done(done),
	.multiplicand(multiplicand),
	.multiplier(multiplier),
	.product(product),
	.product0(product0),
	.product1(product1),
	.product2(product2),
	.product3(product3),
	.start(start)
);

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 
// multiplicand[ 7 ]
initial
begin
	multiplicand[7] = 1'b0;
end 
// multiplicand[ 6 ]
initial
begin
	multiplicand[6] = 1'b1;
end 
// multiplicand[ 5 ]
initial
begin
	multiplicand[5] = 1'b0;
end 
// multiplicand[ 4 ]
initial
begin
	multiplicand[4] = 1'b1;
end 
// multiplicand[ 3 ]
initial
begin
	multiplicand[3] = 1'b0;
end 
// multiplicand[ 2 ]
initial
begin
	multiplicand[2] = 1'b1;
end 
// multiplicand[ 1 ]
initial
begin
	multiplicand[1] = 1'b0;
end 
// multiplicand[ 0 ]
initial
begin
	multiplicand[0] = 1'b1;
end 
// multiplier[ 7 ]
initial
begin
	multiplier[7] = 1'b1;
end 
// multiplier[ 6 ]
initial
begin
	multiplier[6] = 1'b1;
end 
// multiplier[ 5 ]
initial
begin
	multiplier[5] = 1'b1;
end 
// multiplier[ 4 ]
initial
begin
	multiplier[4] = 1'b0;
end 
// multiplier[ 3 ]
initial
begin
	multiplier[3] = 1'b0;
end 
// multiplier[ 2 ]
initial
begin
	multiplier[2] = 1'b1;
end 
// multiplier[ 1 ]
initial
begin
	multiplier[1] = 1'b1;
end 
// multiplier[ 0 ]
initial
begin
	multiplier[0] = 1'b1;
end 

// start
initial
begin
	start = 1'b1;
end 

IntegerMultiplier_vlg_sample_tst tb_sample (
	.clock(clock),
	.multiplicand(multiplicand),
	.multiplier(multiplier),
	.start(start),
	.sampler_tx(sampler)
);

IntegerMultiplier_vlg_check_tst tb_out(
	.counter0(counter0),
	.counter1(counter1),
	.done(done),
	.product(product),
	.product0(product0),
	.product1(product1),
	.product2(product2),
	.product3(product3),
	.sampler_rx(sampler)
);
endmodule

